/*
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

Example: 
Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]

*/

public class Solution {
    public int[] BuildArray(int[] nums) {
        
        //Create Answer List, which will later turn into a array
        List<int> ans = new List<int>();
        
        //Add all items from given array 'num' too list 'ans'
        foreach(var i in nums){
            ans.Add(i);
        }
        
        for(int i = 0; i <= ans.Count-1; i++){
            ans[i] = nums[nums[i]];
        }
        
        return ans.ToArray();
    }
}
